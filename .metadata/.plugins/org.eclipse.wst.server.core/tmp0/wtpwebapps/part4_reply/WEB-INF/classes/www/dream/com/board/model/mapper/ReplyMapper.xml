<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="www.dream.com.board.model.mapper.ReplyMapper">
	<resultMap id="replyResultMap"
		type="www.dream.com.board.model.ReplyVO"
		extends="www.dream.com.framework.model.mapper.FrameworkMapper.commonMngInfoResultMap">
		<constructor>
			<idArg column="id" javaType="long" />
		</constructor>
		<result property="content" column="content" />
		<result property="countOfReply" column="count_of_reply" />
		<association property="writer" column="writer_id" 
			resultMap="www.dream.com.party.model.mapper.PartyMapper.partyResultMap" columnPrefix="w_">
		</association>
		<collection property="listHashTag"
			ofType="www.dream.com.framework.hashTagAnalyzer.model.HashTagVO" 
			columnPrefix="ht_">
			<constructor>
				<idArg column="id" javaType="long" />
			</constructor>
			<result property="word" column="word" />
			<result property="descript" column="descript" />
		</collection>
		<discriminator javaType="String" column="obj_type">
			<case value="post" resultMap="postResultMap" />
		</discriminator>
	</resultMap>
	
	<resultMap id="postResultMap"
		type="www.dream.com.board.model.PostVO" extends="replyResultMap">
		<result property="title" column="title" />
		<result property="boardId" column="board_id" />
	</resultMap>

	<sql id="searchSql">
		<where>
			<if test="criteria.searchArr != null">
			p.id in (
			 	   select reply_id
				     from M_HT_Reply m
					where m.hash_tag_id in (
						  SELECT id
						    FROM T_Hash_Tag
					 	   START WITH word in
					 	   <foreach item="word" collection="criteria.searchArr" open="(" separator="," close=")">
					 	   		#{word}
					 	   </foreach> 
						 CONNECT BY PRIOR id = super_id)
				   )
			</if>
		   and p.board_id = #{boardId}
		   and p.obj_type = 'post'
		</where>	
	</sql>
	<!--  -->
	<select id="countTotalPostWithPaging" resultType="long">
	<![CDATA[
		select count(*)
		  from T_Reply p
	]]>
		<include refid="searchSql"></include>
	</select>
	
	<select id="findPostWithPaging" resultMap="replyResultMap">
	<![CDATA[
	 select *
	   from (
			select rownum rn, p.id, p.content, p.writer_id, p.obj_type, p.title, p.reg_date, p.update_date, 
				   w.id w_id, w.name w_name, w.party_type w_party_type
			  from T_Reply p
				   left outer join T_Party w on p.writer_id = w.id
	]]>
		<include refid="searchSql"></include>
	<![CDATA[
			   and rownum <= #{criteria.limit}
			 order by p.id desc
			)
	  where rn > #{criteria.offset}
	]]>
	</select>

	<insert id="registerPost">
		<selectKey keyProperty="id" order="BEFORE" resultType="long">
			select seq4Reply_id.nextval from dual
		</selectKey>
		<![CDATA[
		insert into T_Reply(id, title, content, writer_id, obj_type, board_id)
		       values(#{id}, #{title, jdbcType=VARCHAR}, #{content, jdbcType=VARCHAR}, #{writer.id}, 'post', #{boardId})
		]]>
	</insert>
	
	<update id="updatePost">
	<![CDATA[
		update T_Reply
		   set title = #{title},
		       content = #{content},
		       update_date = sysdate
		 where id = #{id}
	]]>
	</update>

	<!-- 이 아래는 댓글 처리를 위한 영역임 -->
	<!-- public long countTotalReplyWithPaging(@Param("originalId") long originalId); -->
	<select id="countTotalReplyWithPaging" resultType="long">
	<![CDATA[
		select count(*)
		  from T_Reply p
	     where p.original_id = #{originalId}
	]]>
	</select>
	<!-- public List<ReplyVO> findReplyWithPaging(@Param("originalId") long originalId, @Param("criteria") Criteria criteria); -->
	<!-- 댓글 개수 산출을 위한 부분의 성능을 페이징 처리와 함께 생각하였을 때, 
	해당 페이지에 대응하는 게시물을 빠르게 선택하여 그다음에 댓글 개수를 산출하였다.
	그리고 게시글 정보 및 작성자 정보를 최종적으로 연결하였다. -->	
	<select id="findReplyWithPaging" resultMap="replyResultMap">
	<![CDATA[
	  select r.*, n.count_of_reply, w.id w_id, w.name w_name, w.party_type w_party_type
  		from (select m.id, count(rr.id) count_of_reply
         	    from (select id
                 		from (select rownum rn, p.id
                          	    from T_Reply p
                         	   where p.original_id = #{originalId}
                           		 and rownum <= #{criteria.limit}
                         	   order by p.id desc
                      		  )
                   		where rn > #{criteria.offset}) m
          		left outer join T_Reply rr on m.id = rr.original_id
        	   group by m.id) n, T_Reply r
   	     left outer join T_Party w on r.writer_id = w.id
  		where n.id = r.id
	]]>
	</select>

	<!-- public ReplyVO findReplyById(long id); -->
	<select id="findReplyById" resultMap="replyResultMap">
	<![CDATA[
		select p.id, p.content, p.writer_id, p.obj_type, p.reg_date, p.update_date, 
			   w.id w_id, w.name w_name, w.party_type w_party_type,
			   ht.id ht_id, ht.word ht_word, ht.descript ht_descript
		  from T_Reply p
			   left outer join T_Party w on p.writer_id = w.id
			   left outer join M_HT_Reply mht on p.id = mht.reply_id
			   left outer join T_Hash_Tag ht on mht.hash_tag_id = ht.id
		 where p.id = #{id}
	]]>
	</select>
	
	<!--	public void registerReply(ReplyVO reply);	-->
	<insert id="registerReply">
		<selectKey keyProperty="id" order="BEFORE" resultType="long">
			select seq4Reply_id.nextval from dual
		</selectKey>
		<![CDATA[
		insert into T_Reply(id, original_id, content, writer_id, obj_type)
		       values(#{id}, #{originalId}, #{content, jdbcType=VARCHAR}, #{writer.id}, 'reply')
		]]>
	</insert>

	<!-- 	public boolean updateReply(ReplyVO reply); -->
	<update id="updateReply">
	<![CDATA[
		update T_Reply
		   set content = #{content},
		       update_date = sysdate
		 where id = #{id}
	]]>
	</update>

	<!-- public boolean removeReply(ReplyVO reply); -->
	<delete id="removeReply">
	<![CDATA[
		delete from T_Reply
		 where id = #{id}
	]]>
	</delete>
</mapper>